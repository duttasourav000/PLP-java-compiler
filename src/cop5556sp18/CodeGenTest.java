/**
 * Starter code with JUnit tests for code generation used in the class project in COP5556 Programming Language Principles 
 * at the University of Florida, Spring 2018.
 * 
 * This software is solely for the educational benefit of students 
 * enrolled in the course during the Spring 2018 semester.  
 * 
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 * 
 *  @Beverly A. Sanders, 2018
 */


package cop5556sp18;

import static org.junit.Assert.*;

import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import javax.swing.JFrame;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp18.CodeGenUtils.DynamicClassLoader;
import cop5556sp18.AST.Program;

public class CodeGenTest {
	
	//determines whether show prints anything
	static boolean doPrint = true;
	
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	//determines whether a classfile is created
	static boolean doCreateFile = false;

	@Rule
	public ExpectedException thrown = ExpectedException.none();
	

	//values passed to CodeGenerator constructor to control grading and debugging output
	private boolean devel = true; //if true, print devel output
	private boolean grade = true; //if true, print grade output
	
//	private boolean devel = false; 
//	private boolean grade = false; 
	
	//sets the default width and height of newly created images.  Should be small enough to fit on screen.
	public static final int defaultWidth = 1024;
	public static final int defaultHeight = 1024;

	
	/**
	 * Generates bytecode for given input.
	 * Throws exceptions for Lexical, Syntax, and Type checking errors
	 * 
	 * @param input   String containing source code
	 * @return        Generated bytecode
	 * @throws Exception
	 */
	byte[] genCode(String input) throws Exception {
		
		//scan, parse, and type check
		Scanner scanner = new Scanner(input);
		show(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		Program program = parser.parse();
		TypeChecker v = new TypeChecker();
		program.visit(v, null);
//		show(program);  //It may be useful useful to show this here if code generation fails

		//generate code
		CodeGenerator cv = new CodeGenerator(devel, grade, null, defaultWidth, defaultHeight);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		show(program); //doing it here shows the values filled in during code gen
		//display the generated bytecode
		show(CodeGenUtils.bytecodeToString(bytecode));
		
		//write byte code to file 
		if (doCreateFile) {
			String name = ((Program) program).progName;
			String classFileName = "bin/" + name + ".class";
			OutputStream output = new FileOutputStream(classFileName);
			output.write(bytecode);
			output.close();
			System.out.println("wrote classfile to " + classFileName);
		}
		
		//return generated classfile as byte array
		return bytecode;
	}
	
	/**
	 * Run main method in given class
	 * 
	 * @param className    
	 * @param bytecode    
	 * @param commandLineArgs  String array containing command line arguments, empty array if none
	 * @throws + 
	 * @throws Throwable 
	 */
	void runCode(String className, byte[] bytecode, String[] commandLineArgs) throws Exception  {
		RuntimeLog.initLog(); //initialize log used for grading.
		DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
		Class<?> testClass = loader.define(className, bytecode);
		@SuppressWarnings("rawtypes")
		Class[] argTypes = {commandLineArgs.getClass()};
		Method m = testClass.getMethod("main", argTypes );
		show("Output from " + m + ":");  //print name of method to be executed
		Object passedArgs[] = {commandLineArgs};  //create array containing params, in this case a single array.
		try {
		m.invoke(null, passedArgs);	
		}
		catch (Exception e) {
			Throwable cause = e.getCause();
			if (cause instanceof Exception) {
				Exception ec = (Exception) e.getCause();
				throw ec;
			}
			throw  e;
		}
	}
	

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
	 * To prevent this behavior, waitForKey will pause until a key is pressed.
	 * 
	 * @throws IOException
	 */
	void waitForKey() throws IOException {
		System.out.println("enter any char to exit");
		System.in.read();
	}

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
	 * To prevent this behavior, keepFrame will keep the frame visible for 5000 milliseconds.
	 * 
	 * @throws Exception
	 */
	void keepFrame() throws Exception {
		Thread.sleep(5000);
	}
	
	
	
	


	/**
	 * Since we are not doing any optimization, the compiler will 
	 * still create a class with a main method and the JUnit test will
	 * execute it.  
	 * 
	 * The only thing it will do is append the "entering main" and "leaving main" messages to the log.
	 * 
	 * @throws Exception
	 */
	@Test
	public void emptyProg() throws Exception {
		String prog = "emptyProg";	
		String input = prog + "{}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n "+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	

	
	@Test
	public void integerLit() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{show 3;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	
	@Test
	public void showLit1() throws Exception {
		String prog = "showLit1";
		String input = prog + "{show true; show 3; show 5.6;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;3;5.6;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void showLit2() throws Exception {
		String prog = "showLit2";
		String input = prog + "{show true; show 3 + 2; show 3 - 2; show 3 * 2; show 11 / 2; show 17 % 5; } ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;5;1;6;5;2;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declaration1() throws Exception {
		String prog = "dec";
		String input = prog + "{int x; boolean y; float z; image i; filename f; show 3; } ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInput1() throws Exception {
		String prog = "statementInput1";
		String input = prog + "{"
				+ "int x; input x from @0; show x;"
				+ "float y; input y from @3; show y;"
				+ "boolean z1; input z1 from @1; show z1;"
				+ "boolean z2; input z2 from @4; show z2;"
				+ "filename f; input f from @2;"
				+ "boolean z3; input z3 from @2+3; show z3;"
				//+ "image i1; input i1 from @6;"
				+ "} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"15", "false", "thisfile", "4.578", "true", "false", "http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;15;4.578;false;true;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void imageInput1() throws Exception {
		String prog = "imageInput1";
		String input = prog + "{"
				+ "image y[128,256];"
				+ "show width(y);"
				+ "show height(y);"
				+ "input y from @ 0 ;"
				+ "show width(y);"
				+ "show height(y);"
				+ "show y;"
				+ "sleep (2000);"
				+ "}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;128;256;128;256;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void imageInput2() throws Exception {
		String prog = "imageInput2";
		String input = prog + "{"
				+ "image y;"
				+ "int w;"
				+ "w := width(y);"
				+ "show w;"
				+ "show height(y);"
				+ "input y from @ 0 ;"
				//+ "if (w > 0) {"
				//+ "image y[((20 + 5) * 6) / 2, 50 / 2 * 3];"
				//+ "};"
				+ "show width(y);"
				+ "show height(y);"
				+ "show y;"
				+ "sleep 2 * (1000 + 2000);"
				+ "}";
		byte[] bytecode = genCode(input);		
		//String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "C:\\Users\\Sourav Dutta\\eclipse-workspace\\PLPHomework\\bin\\birdimage_2.jpg"}; //create command line argument array to initialize params, none in this case
		String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png"}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1024;1024;999;799;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void imageInput3() throws Exception {
		String prog = "imageInput3";
		String input = prog + "{"
				+ "image im1;"
				+ "input im1 from @0;"
				+ "show width(im1);"
				+ "show height(im1);"
				+ "image im2;"
				+ "input im2 from @ 2 ;"
				+ "show width(im2);"
				+ "show height(im2);"
				+ "}";
		byte[] bytecode = genCode(input);		
		//String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "C:\\Users\\Sourav Dutta\\eclipse-workspace\\PLPHomework\\bin\\birdimage_1.jpg", "C:\\Users\\Sourav Dutta\\eclipse-workspace\\PLPHomework\\bin\\birdimage_2.jpg"}; //create command line argument array to initialize params, none in this case
		String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png"};
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;999;799;999;799;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void imageInput4() throws Exception {
		String prog = "imageInput4";
		String input = prog + "{"
				+ "image y[128,256];"
				+ "show width(y);"
				+ "show height(y);"
				+ "input y from @ 0 ;"
				+ "show width(y);"
				+ "show height(y);"
				+ "show (y);"
				+ "sleep 2000;"
				+ "image z;"
				+ "z:=y;"
				+ "input y from @1;"
				+ "show width(y);"
				+ "show height(y);"
				+ "show y;"
				+ "sleep 2000;"
				+ "show width(z);"
				+ "show height(z);"
				+ "show z;"
				+ "sleep (2000);"
				+ "}";
		byte[] bytecode = genCode(input);		
		//String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "C:\\Users\\Sourav Dutta\\eclipse-workspace\\PLPHomework\\bin\\birdimage_1.jpg"}; //create command line argument array to initialize params, none in this case		
		String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png"};
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;128;256;128;256;128;256;128;256;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementAssign1() throws Exception {
		String prog = "statementAssign1";
		String input = prog + "{"
				+ "int x; x := 4; show x; "
				+ "filename f1; filename f2; input f1 from @0; f2 := f1;"
				+ "boolean b1; b1 := true; boolean b2; b2 := b1; show b2;"
				+ "float fl1; float fl2; fl1 := 4.5 + x + 0.5 - 2.5; fl2 := fl1 / 0.5; show fl1; show fl2;"
				+ "x := x + 1;"
				+ "show x;"
				+ "x := x / 5;"
				+ "show x;"
				+ "fl1 := fl2 / (fl1 + 1);"
				+ "show fl1;"
				+ "} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;4;true;6.5;13.0;5;1;1.7333333;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementAssign2() throws Exception {
		String prog = "statementAssign2";
		String input = prog + "{"
				+ "int x; x := 4; show x; "
				+ "show x ** 2 * 3;"
				+ "show x ** (2 * 3);"
				+ "float a; a := 0.5;"
				+ "show 2 ** a;"
				+ "} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;4;48;4096;1.4142135;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinary1() throws Exception {
		String prog = "expressionBinary1";
		String input = prog + "{"
				+ "show 2 + 2;"
				+ "show 2 - 2;"
				+ "show 11 * -9;"
				+ "show 9 / 4;"
				+ "show 17 % 3;"
				+ "show 6 & 2;"
				+ "show 6 | 3;"
				+ "show 2 ** -2;"
				+ "show 5 - 90;"
				+ "} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;4;0;-99;2;2;2;7;0;-85;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinary2() throws Exception {
		String prog = "expressionBinary2";
		String input = prog + "{"
				+ "show 2.5 + 2.5;"
				+ "show 2.7 - .3;"
				+ "show 2.5 * 2.5;"
				+ "show 9.0 / 4.0;"
				+ "show 2.0 ** -2.0;"
				+ "show 2.5 ** 2.0;"
				+ "} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5.0;2.4;6.25;2.25;0.25;6.25;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinary3() throws Exception {
		String prog = "expressionBinary3";
		String input = prog + "{"
				+ "show 2 + 2.5;"
				+ "show 2 - .3;"
				+ "show 2 * 2.5;"
				+ "show 9 / 4.0;"
				+ "show 2 ** -2.0;"
				+ "show 2 ** 2.0;"
				+ "} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;4.5;1.7;5.0;2.25;0.25;4.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinary4() throws Exception {
		String prog = "expressionBinary4";
		String input = prog + "{"
				+ "show 2.5 + 2;"
				+ "show 2.7 - 3;"
				+ "show 2.5 * 2;"
				+ "show 9.0 / 4;"
				+ "show 2.0 ** -2;"
				+ "show 2.5 ** 2;"
				+ "} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;4.5;-0.29999995;5.0;2.25;0.25;6.25;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinary5() throws Exception {
		String prog = "expressionBinary5";
		String input = prog + "{"
				+ "show (2 == 2) & true;"
				+ "show 2 != 3 | (3.25 == 3.25);"
				+ "show 2 < 5;"
				+ "show 6 > 6;"
				+ "show 6 >= 6;"
				+ "show 8 <= 8;"
				+ "show 6 >= 7;"
				+ "show 8 <= 10;"
				+ "} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;true;true;false;true;true;false;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinary6() throws Exception {
		String prog = "expressionBinary6";
		String input = prog + "{"
				+ "show (2.7 == 2.7) & true;"
				+ "show 2.5 != 3.8 | (3.25 == 3.25);"
				+ "show 2.7 < 2.7 & false;"
				+ "show 6.6 > 6.6;"
				+ "show 6.34 >= 6.567;"
				+ "show 8.245 <= 8.3;"
				+ "show 6.0 >= 7.1;"
				+ "show 8.9 <= 10.0;"
				+ "} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;true;false;false;false;true;false;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionPredefined1() throws Exception {
		String prog = "expressionPredefined1";
		String input = prog + "{"
				+ "show Z;"
				+ "show default_width;"
				+ "show default_height;"
				+ "} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;255;1024;1024;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionArgs1() throws Exception {
		String prog = "expressionFunctionArgs1";
		String input = prog + "{"
				+ "show sin(8.0);"
				+ "show cos(8.0);"
				+ "show atan(0.0);"
				+ "show atan(10.0);"
				+ "show log(20.0);"
				+ "show int(4.7);"
				+ "show float(Z) == 255.0;"
				+ "show int(45.7) == 45;"
				+ "show abs(-67.8);"
				+ "show abs(67.8);"
				+ "show float(67.8);"
				+ "show int(67);"
				+ "} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;0.98935825;-0.14550003;0.0;1.4711276;2.9957323;4;true;true;67.8;67.8;67.8;67;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void Color1() throws Exception {
		String prog = "color1";
		String input = prog + "{int a; a := 123456789;\n show red(a); show green(a); show blue(a);}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;91;205;21;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void Color2() throws Exception {
		String prog = "color2";
		String input = prog + "{int a; a := 123456789; show alpha(a);\n a := -1; show alpha(a);}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void imageWrite1() throws Exception {
		String prog = "imageWrite1";
		String input = prog + "{"
				+ "image y[128,256];"
				+ "show width(y);"
				+ "show height(y);"
				+ "input y from @ 0 ;"
				+ "show width(y);"
				+ "show height(y);"
				+ "show y;"
				+ "filename f;"
				+ "input f from @1;"
				+ "write y to f;"
				+ "}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "writeImg1.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;128;256;128;256;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementWhile1() throws Exception {
		String prog = "statementWhile1";
		String input = prog + "{"
				+ "int x;"
				+ "int y;"
				+ "x := 10;"
				+ "y := 5;"
				+ "show x;"
				+ "show y;"
				+ "while (x > y) {"
				+ "x := x - 1;"
				+ "show x;"
				+ "};"
				+ "show x;"
				+ "show y;"
				+ "}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10;5;9;8;7;6;5;5;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementWhile2() throws Exception {
		String prog = "statementWhile2";
		String input = prog + "{"
				+ "int x;"
				+ "int y;"
				+ "x := 10;"
				+ "y := 5;"
				+ "show x;"
				+ "show y;"
				+ "while (x >= y) {"
				+ "x := x - 1;"
				+ "show x;"
				+ "};"
				+ "show x;"
				+ "show y;"
				+ "}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10;5;9;8;7;6;5;4;4;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementWhile3() throws Exception {
		String prog = "statementWhile3";
		String input = prog + "{"
				+ "int x;"
				+ "int y;"
				+ "x := 10;"
				+ "y := 5;"
				+ "show x;"
				+ "show y;"
				+ "while (x >= y) {"
				+ "x := x - 1;"
				+ "int y;"
				+ "y := 20;"
				+ "show x;"
				+ "show y;"
				+ "};"
				+ "show x;"
				+ "show y;"
				+ "}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10;5;9;20;8;20;7;20;6;20;5;20;4;20;4;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementIf1() throws Exception {
		String prog = "statementIf1";
		String input = prog + "{"
				+ "int x;"
				+ "int y;"
				+ "x := 10;"
				+ "y := 5;"
				+ "if (x >= y) {"
				+ "show x;"
				+ "};"
				+ "if (x <= y) {"
				+ "show y;"
				+ "};"
				+ "show x;"
				+ "show y;"
				+ "}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10;10;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementIf2() throws Exception {
		String prog = "statementIf2";
		String input = prog + "{"
				+ "int x;"
				+ "int y;"
				+ "x := 10;"
				+ "y := 5;"
				+ "if (x >= y) {"
				+ "int z;"
				+ "z := 12;"
				+ "show z;"
				+ "show x;"
				+ "};"
				+ "if (x <= y) {"
				+ "show y;"
				+ "};"
				+ "show x;"
				+ "show y;"
				+ "}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;12;10;10;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementIf3() throws Exception {
		String prog = "statementIf3";
		String input = prog + "{"
				+ "int x;"
				+ "int y;"
				+ "x := 10;"
				+ "y := 5;"
				+ "if (x >= y) {"
				+ "int z;"
				+ "z := 12;"
				+ "show z;"
				+ "show x;"
				+ "};"
				+ "if (x <= y) {"
				+ "int x;"
				+ "show y;"
				+ "};"
				+ "show x;"
				+ "show y;"
				+ "}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"abc"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;12;10;10;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionConditional1() throws Exception {
		String prog = "expressionConditional1";
		String input = prog + "{"
				+ "int x;"
				+ "int y;"
				+ "x := 10;"
				+ "y := 5;"
				+ "int z;"
				+ "z := x > y ? 100 : 200;"
				+ "show z;"
				+ "x := 3;"
				+ "z := x > y ? 100 : 200;"
				+ "show z;"
				+ "}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;100;200;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void lhsPixel1() throws Exception {
		String prog = "lhsPixel1";
		String input = prog + "{"
				+ "image y;"
				+ "show width(y);"
				+ "show height(y);"
				+ "input y from @ 0 ;"
				+ "show width(y);"
				+ "show height(y);"
				//+ "show y;"
				//+ "sleep 2000;"
				+ "y[100, 100] := 100;"
				+ "filename f;"
				+ "input f from @1;"
				+ "write y to f;"
				+ "}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "writeImg2.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1024;1024;999;799;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void lhsSample1() throws Exception {
		String prog = "lhsSample1";
		String input = prog + "{"
				+ "image y;"
				+ "show width(y);"
				+ "show height(y);"
				+ "input y from @ 0 ;"
				+ "show width(y);"
				+ "show height(y);"
				+ "show y;"
				+ "sleep 2000;"
				+ "int z;"
				+ "z:=y[width(y) / 2, height(y) / 2];"
				+ "show z;"
				+ "red(y[100, 100]) := 100;"
				+ "z:=y[100,100];"
				+ "show z;"
				+ "filename f;"
				+ "input f from @1;"
				+ "write y to f;"
				+ "}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "writeImg3.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1024;1024;999;799;0;6553600;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void pixelCons1() throws Exception {
		String prog = "pixelCons1";
		String input = prog + "{"
				+ "int a;"
				+ "a:=100;"
				+ "int b;"
				+ "b:=200;"
				+ "int c;"
				+ "c:=150;"
				+ "int d;"
				+ "d:=250;"
				+ "int y;"
				+ "y := <<a, b, c, d>>;"
				+ "show y;"
				+ "}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "writeImg3.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1690867450;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void funcAppWithPixel1() throws Exception {
		String prog = "funcAppWithPixel1";
		String input = prog + "{\n"
				+ "float r;\n"
				+ "r:=10.5;\n"
				+ "float theta;\n"
				+ "theta:=30.3;\n"
				+ "int x;\n"
				+ "int y;\n"
				+ "x:=cart_x[r,theta];\n"
				+ "y:=cart_y[r,theta];\n"
				+ "show r;\n"
				+ "show theta;\n"
				+ "show x;\n"
				+ "show y;\n"
				+ "r := polar_r[x, y];\n"
				+ "theta := polar_a[x,y];\n"
				+ "show r;\n"
				+ "show theta;\n"
				+ "show x;\n"
				+ "show y;\n"
				+ "}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "writeImg3.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10.5;30.3;4;-9;9.848858;-1.152572;4;-9;leaving main;",RuntimeLog.globalLog.toString());
	}


	@Test
    public void full_testDemo1() throws Exception {
		String prog = "demo1";
        String input = prog + "{image h;input h from @0;show h; sleep(4000); image g[width(h),height(h)];int x;x:=0;"
                        + "while(x<width(g)){int y;y:=0;while(y<height(g)){g[x,y]:=h[y,x];y:=y+1;};x:=x+1;};show g;sleep(4000);}";
        byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }
    
    @Test
    public void full_makeRedImage() throws Exception {
		String prog = "makeRedImage";
        String input = prog + "{image im[256,256];int x;int y;x:=0;y:=0;while(x<width(im)) {y:=0;while(y<height(im)) {im[x,y]:=<<255,255,0,0>>;y:=y+1;};x:=x+1;};show im;sleep 2000;}";
        byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }
    
    @Test
    public void full_testPolarR2() throws Exception {
		String prog = "PolarR2";
        String input = prog + "{image im[1024,1024];int x;x:=0;while(x<width(im)) {int y;y:=0;while(y<height(im)) {float p;p:=polar_r[x,y];int r;r:=int(p)%Z;im[x,y]:=<<Z,0,0,r>>;y:=y+1;};x:=x+1;};show im;sleep 2000;}";
        byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }
    
    @Test
    public void full_testSamples() throws Exception {
		String prog = "samples";
        String input = prog + "{image bird; input bird from @0;show bird;sleep(4000);image bird2[width(bird),height(bird)];int x;x:=0;while(x<width(bird2)) {int y;y:=0;while(y<height(bird2)) {blue(bird2[x,y]):=red(bird[x,y]);green(bird2[x,y]):=blue(bird[x,y]);red(bird2[x,y]):=green(bird[x,y]);alpha(bird2[x,y]):=Z;y:=y+1;};x:=x+1;};show bird2;sleep(4000);}";
        byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
    }
    
    @Test
    public void testCase1() throws Exception {
		String prog = "testCase1";
        String input = prog + "{image y[1000,1000]; "
        		+ "image copy[1000,1000]; "
        		+ "input y from @ 0 ; "
        		+ "show y; sleep 1000; "
        		+ "copy := y; "
        		+ "show copy; "
        		+ "sleep 2000;"
        		+ "image r[100, 100];"
        		+ "input r from @1;"
        		+ "show r[50, 50];"
        		+ "r[70,70] := 123456789;"
        		+ "show r;"
        		+ "sleep(10000);"
        		+ "show r[70, 70];"
        		+ "show red(r[70, 70]);"
        		+ "show green(r[70, 70]);"
        		+ "show blue(r[70, 70]);"
        		+ "show alpha(r[70, 70]);"
        		+ "} ";
        byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e2/Red_Red.svg/1280px-Red_Red.svg.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-65536;123456789;91;205;21;7;leaving main;",RuntimeLog.globalLog.toString());
	}
    
   @Test
    public void pixelFloat1() throws Exception {
		String prog = "pixelFloat1";
        String input = prog + "{image y[1000,1000]; "
        		+ "image copy[1000,1000]; "
        		+ "input y from @ 0 ; "
        		+ "show y[10, 12];"
        		+ "show polar_r[10, 12];"
        		+ "show polar_a[10, 12];"
        		+ "show cart_x[15.6205,0.87605804];"
        		+ "show cart_y[15.6205, 0.87605804];"
        		+ "show y[15.6205, 0.87605804];"
        		+ "} ";
        byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://78.media.tumblr.com/b93590a47e1f5f63671cd9797e568a3f/tumblr_nnot2zeo0U1td4672o1_500.jpg", "http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e2/Red_Red.svg/1280px-Red_Red.svg.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-15259341;15.6205;0.87605804;10;12;-15259341;leaving main;",RuntimeLog.globalLog.toString());
	}
    
    @Test
    public void scope1() throws Exception {
		String prog = "scope1";
        String input = prog + "{"
        		+ "image y;"
        		+ "input y from @0;"
        		+ "if (true) {"
        		+ "show y;"
        		+ "sleep 2000;"
        		+ "};"
        		//+ "int y;"
        		//+ "y:=10;"
        		//+ "show y;"
        		//+ "image y; "
        		//+ "input y from @0 ; "
        		//+ "filename f1;"
        		//+ "input f1 from @4;"
        		//+ "filename f2;"
        		//+ "input f2 from @5;"
        		//+ "if (true) {"
        		//+ "write y to f1;"
        		//+ "input y from @1 ;"
        		//+ "write y to f2;"
        		//+ "show y;"
        		//+ "sleep 2000;"      		
        		//+ "};"
        		//+ "show y;"
        		//+ "sleep 2000;"
        		+ "} ";
        byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e2/Red_Red.svg/1280px-Red_Red.svg.png", "3", "5", "tempImg1.png", "tempImg2.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
    
    @Test
	public void test6() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{ image im[1,1];"
				+ "filename f;"
				+ "input f from @0;"
				+ "int x;"
				+ "int y;"
				+ "x:=0;"
				+ "y:=0;"
				+ "im[x,y] := <<0,255,0,0>>;"
				//+ "show red(im[x,y]);"
				/*+ "int x; int y;\n"
				+ "x := 0; y := 0;\n"
				+ "while (x < width(im)){ "
				+ "show x;"
				+ "y := 0;"
				+ "while (y < height(im))"
				+ "{"
				+ "show y;"
				+ "im[x,y] := <<0,255,0,0>>; "
				+ "y := y + 1; "
				+ "};"
				+ "x := x + 1;};"
				//+ "show im;"*/
				+ "write im to f;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"img1.jpg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;16711680;leaving main;",RuntimeLog.globalLog.toString());
	}
}